<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>harmy.me</title><link href="http://harmy.me/" rel="alternate"></link><link href="http://harmy.me/feeds/content.atom.xml" rel="self"></link><id>http://harmy.me/</id><updated>2012-08-23T00:00:00+08:00</updated><entry><title>The Twelve-Factor App</title><link href="http://harmy.me/the-twelve-factor-app.html" rel="alternate"></link><updated>2012-08-23T00:00:00+08:00</updated><author><name>harmy</name></author><id>tag:harmy.me,2012-08-23:the-twelve-factor-app.html</id><summary type="html">&lt;h1&gt;简介&lt;/h1&gt;
&lt;p&gt;如今，软件通常会作为一种服务来交付，它们被称为网络应用程序，或“软件即服务”（SaaS）。“十二要素应用程序”（12-Factor App）为构建如下的SaaS应用提供了方法论：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;使用&lt;strong&gt;标准化&lt;/strong&gt;流程自动配置，从而使新的开发者花费最少的学习成本加入这个项目；&lt;/li&gt;
&lt;li&gt;和操作系统之间尽可能的&lt;strong&gt;划清界限&lt;/strong&gt;，在各个系统中提供&lt;strong&gt;最大的可移植性&lt;/strong&gt;；&lt;/li&gt;
&lt;li&gt;适合&lt;strong&gt;部署&lt;/strong&gt;在现代的&lt;strong&gt;云计算平台&lt;/strong&gt;，从而在服务器和系统管理方面节省资源；&lt;/li&gt;
&lt;li&gt;将开发环境和生产环境的&lt;strong&gt;差异降至最低&lt;/strong&gt;，并使用&lt;strong&gt;持续交付&lt;/strong&gt;实施敏捷开发；&lt;/li&gt;
&lt;li&gt;可以在工具、架构和开发流程不发生明显变化的前提下实现&lt;strong&gt;扩展&lt;/strong&gt;；&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这套理论适用于任意语言和后端服务（数据库、消息队列、缓存等）开发的应用程序。&lt;/p&gt;
&lt;h1&gt;背景&lt;/h1&gt;
&lt;p&gt;本文的贡献者者参与过数以百计的应用程序的开发和部署，并通过&lt;a href="http://www.heroku.com/"&gt;Heroku&lt;/a&gt;平台间接见证了数十万应用程序的开发，运作以及扩展的过程。&lt;/p&gt;
&lt;p&gt;本文综合了我们关于SaaS应用几乎所有的经验和智慧，是开发此类应用的理想实践标准，并特别关注于应用程序如何保持良性成长，开发者之间如何进行有效的代码协作，以及如何&lt;a href="http://blog.heroku.com/archives/2011/6/28/the_new_heroku_4_erosion_resistance_explicit_contracts/"&gt;避免软件污染&lt;/a&gt; 。&lt;/p&gt;
&lt;p&gt;我们的初衷是分享在现代软件开发过程中发现的一些系统性问题，并加深对这些问题的认识。我们提供了讨论这些问题时所需的共享词汇，同时使用相关术语给出一套针对这些问题的广义解决方案。本文格式的灵感来自于Martin Fowler的书籍： &lt;em&gt;&lt;a href="http://books.google.com/books/about/Patterns_of_enterprise_application_archi.html?id=FyWZt5DdvFkC"&gt;Patterns of Enterprise Application Architecture&lt;/a&gt;&lt;/em&gt; ， &lt;em&gt;&lt;a href="http://books.google.com/books/about/Refactoring.html?id=1MsETFPD3I0C"&gt;Refactoring&lt;/a&gt;&lt;/em&gt; 。&lt;/p&gt;
&lt;h1&gt;读者应该是哪些人？&lt;/h1&gt;
&lt;p&gt;任何SaaS应用的开发人员。部署和管理此类应用的运维工程师。&lt;/p&gt;
&lt;h1&gt;The Twelve Factors&lt;/h1&gt;
&lt;h2&gt;&lt;a href="http://www.harmy.me/pages/codebase.html"&gt;I. 基准代码&lt;/a&gt;&lt;/h2&gt;
&lt;h3&gt;一份基准代码，多份部署&lt;/h3&gt;
&lt;h2&gt;&lt;a href="http://www.harmy.me/pages/dependencies.html"&gt;II. 依赖&lt;/a&gt;&lt;/h2&gt;
&lt;h3&gt;显式声明依赖关系&lt;/h3&gt;
&lt;h2&gt;&lt;a href="http://www.harmy.me/pages/config.html"&gt;III. 配置&lt;/a&gt;&lt;/h2&gt;
&lt;h3&gt;在环境中存储配置&lt;/h3&gt;
&lt;h2&gt;&lt;a href="http://www.harmy.me/pages/backing-services.html"&gt;IV. 后端服务&lt;/a&gt;&lt;/h2&gt;
&lt;h3&gt;把后端服务当作附加资源&lt;/h3&gt;
&lt;h2&gt;&lt;a href="http://www.harmy.me/pages/build-release-run.html"&gt;V. 构建，发布，运行&lt;/a&gt;&lt;/h2&gt;
&lt;h3&gt;严格分离构建和运行&lt;/h3&gt;
&lt;h2&gt;&lt;a href="http://www.harmy.me/pages/processes.html"&gt;VI. 进程&lt;/a&gt;&lt;/h2&gt;
&lt;h3&gt;以一个或多个无状态进程运行应用&lt;/h3&gt;
&lt;h2&gt;&lt;a href="http://www.harmy.me/pages/port-binding.html"&gt;VII. 端口绑定&lt;/a&gt;&lt;/h2&gt;
&lt;h3&gt;通过端口绑定提供服务&lt;/h3&gt;
&lt;h2&gt;&lt;a href="http://www.harmy.me/pages/concurrency.html"&gt;VIII. 并发&lt;/a&gt;&lt;/h2&gt;
&lt;h3&gt;通过进程模型进行扩展&lt;/h3&gt;
&lt;h2&gt;&lt;a href="http://www.harmy.me/pages/disposability"&gt;IX. 易处理&lt;/a&gt;&lt;/h2&gt;
&lt;h3&gt;快速启动和优雅终止可最大化健壮性&lt;/h3&gt;
&lt;h2&gt;&lt;a href="http://www.harmy.me/pages/devprod-parity.html"&gt;X. 开发环境与线上环境等价&lt;/a&gt;&lt;/h2&gt;
&lt;h3&gt;尽可能的保持开发，预发布，线上环境相同&lt;/h3&gt;
&lt;h2&gt;&lt;a href="http://www.harmy.me/pages/logs.html"&gt;XI. 日志&lt;/a&gt;&lt;/h2&gt;
&lt;h3&gt;把日志当作事件流&lt;/h3&gt;
&lt;h2&gt;&lt;a href="http://www.harmy.me/pages/admin-processes.html"&gt;XII. 管理进程&lt;/a&gt;&lt;/h2&gt;
&lt;h3&gt;后台管理任务当作一次性进程运行&lt;/h3&gt;</summary><category term="tech"></category></entry></feed>